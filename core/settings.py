"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

from .secrets import *

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for django-allauth
    # allauth apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # allauth apps -> Providers
    'allauth.socialaccount.providers.google',
    #'allauth.socialaccount.providers.facebook', # TODO: enable FB and add settings to socialaccount in /cp/ after verifying FB developer
    # Other apps
    'crispy_forms',
    'crispy_bootstrap5',
    'phonenumber_field',
    'core.apps.CoreAppConfig' # This is important to run startup function of core app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Serves static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',  # i18n
    'core.middleware.FlexibleAllowedHostsMiddleware', # Flexiblly consider all ACA possible subdomains on ACA Env as allowed host
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware', # Important for Outh
    'allauth.account.middleware.AccountMiddleware', # Important for Outh
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'core', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# APP domain Name
APP_DOMAIN_NAME = "skinsight-care.com"

# Sites settings - for django.contrib.sites
SITE_ID = 1

# Localization (i18n) Config
USE_I18N = True
USE_L10N = True
USE_TZ = True

LANGUAGE_CODE = 'en'  # default language

LANGUAGES = [
    ('en', 'English'),
    ('ar', 'Arabic'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

# User account and authentication settings

# Django Allauth settings
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*'] # * means required. password2 refers to password_confirmation
ACCOUNT_SIGNUP_REDIRECT_URL = None  # Optional
ACCOUNT_RATE_LIMITS = {
    'login_failed': '5/m',  # 5 attempts per minute
}

# The Django model used for authentication
AUTH_USER_MODEL = 'core.User' 

# Authentication settings
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',  # enables OAuth2
)

# Drive the redirect logic on user login based on user's group (admin, professional, client, other)
LOGIN_REDIRECT_URL = '/' # This is the default redirect URL after login, it will be overridden by the adapter logic
LOGOUT_REDIRECT_URL = '/'  # or any named URL or absolute URL
ACCOUNT_LOGOUT_REDIRECT_URL = 'homepage'
ACCOUNT_LOGOUT_ON_GET = True  # skips logout confirmation page
SOCIALACCOUNT_AUTO_SIGNUP = False  # don't allow signup using Outh. Only site admin can create account manually for now. # TODO: add Outh signup if needed


ACCOUNT_ADAPTER = 'core.adapters.MyAccountAdapter' # Here Django usual user account sign-in / sign-out are disabled. Only Outh2 is allowed

# Drive the redirect logic on user logout
ACCOUNT_LOGOUT_REDIRECT_URL = '/'


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = BASE_DIR / 'staticfiles' # The directory where collectstatic will collect static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Crispy Forms settings
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# ==== General Config ======
UNLIMITED_NUMBER_REPRESENTAION = -1

# ==== Contact US Config ========
CONTACT_US_FROM_EMAIL = "skinsight@captaincto.com"
CONTACT_US_TO_EMAIL = "skinsight@captaincto.com"

# ==== Platform Admin FHIR Attributes ====
PLATFORM_ADMIN_FHIR_ID = "platform-admin"

# ==== Questionnaire (Quiz) Config ======
ACTIVE_QUESTIONNAIRE_TITLE = "skincare-checkup-v.1.0"
ACTIVE_QUESTIONNAIRE_ID = "1fac7442-2594-436e-832d-303207988cfc" # This will be set filled manually when questionnaire is populated to FHIR

# ==== Care-Chart Config =====
CARE_CHART_MAX_N_QUESTIONNAIRES = 6 # The max number of quiz submissions to show on skin care chart
CARE_CHART_ANSWER_INITIAL_VAL = 5 # Represents the "middle" value on the scale, and quiz submissions answers are accumalated on top of it
CARE_CHART_ANSWER_MIN_VAL = 2
CARE_CHART_ANSWER_MAX_VAL = 10

# ==== Plans, Subscriptions, Payment ====
PLATFORM_CURRENCY = "USD"  # Currency used for platform plans and subscriptions


# ================= Secrets: Dev vs Production =====================
IS_PRODUCTION = bool(os.environ.get("IS_PRODUCTION", 0))

if IS_PRODUCTION: # On Cloud , use ACA env vars

    # Allowed Hosts
    ALLOWED_HOSTS = ["*"] # !Important: request will pass by core.middleware.FlexibleAllowedHostsMiddleware in all cirumistances

    # HTTPS
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

    # Allowed CSRF Origins - Dynamically get full hostname of this revision from request env (if available)
    CSRF_TRUSTED_ORIGINS = []
    revision_hostname = os.environ.get("HOSTNAME")  # Azure automatically sets `HOSTNAME` to the FQDN of the current revision
    if  revision_hostname and os.environ.get("HOSTNAME").endswith(os.environ.get("AZURE_ACA_ENV_BASE_DOMAIN")):
        CSRF_TRUSTED_ORIGINS.append(f"https://{revision_hostname}")

    # Default Password for auto generated accounts - Remeber that all data is stored on Azure-FHIR and a django user is only for roles purpose
    USER_DEFAULT_PASSWORD = os.environ.get("USER_DEFAULT_PASSWORD", "")

    # Azure
    AZURE_TENANT_ID = os.environ.get("AZURE_TENANT_ID", "")
    AZURE_CLIENT_ID = os.environ.get("AZURE_CLIENT_ID", "")
    AZURE_CLIENT_SECRET = os.environ.get("AZURE_CLIENT_SECRET", "")
    AZURE_FHIR_SERVICE_URL = os.environ.get("AZURE_PRODUCTION_FHIR_SERVICE_URL", "")
    AZURE_FHIR_SERVICE_SCOPE = os.environ.get("AZURE_PRODUCTION_FHIR_SERVICE_SCOPE", "")

    # Google OAuth2
    GOOGLE_OUTH_CLIENT_ID = os.environ.get("GOOGLE_OUTH_CLIENT_ID", "")
    GOOGLE_OUTH_CLIENT_SECRET = os.environ.get("GOOGLE_OUTH_CLIENT_SECRET", "")


else: # DEV: Use values imported from secrets.py

    # Allowed Hosts
    ALLOWED_HOSTS = ["127.0.0.1", "0.0.0.0", "localhost"] # !Important: request will pass by core.middleware.FlexibleAllowedHostsMiddleware in all cirumistances

    # Default Password for auto generated accounts - Remeber that all data is stored on Azure-FHIR and a django user is only for roles purpose
    USER_DEFAULT_PASSWORD = USER_DEFAULT_PASSWORD

    # Azure
    AZURE_TENANT_ID = AZURE_TENANT_ID
    AZURE_CLIENT_ID = AZURE_CLIENT_ID
    AZURE_CLIENT_SECRET = AZURE_CLIENT_SECRET
    AZURE_FHIR_SERVICE_URL = AZURE_DEV_FHIR_SERVICE_URL
    AZURE_FHIR_SERVICE_SCOPE = AZURE_DEV_FHIR_SERVICE_SCOPE

    # Google OAuth2
    GOOGLE_OUTH_CLIENT_ID = GOOGLE_OUTH_CLIENT_ID
    GOOGLE_OUTH_CLIENT_SECRET = GOOGLE_OUTH_CLIENT_SECRET

